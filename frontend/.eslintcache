[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"8","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"9","F:\\Code\\shopPro\\frontend\\src\\store.js":"10","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"11","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"12","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"14","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"15","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"16","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"17","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"18","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"19","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"20","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"21","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"22","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"23","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"27","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"31","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"32","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"33","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"40","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"41"},{"size":596,"mtime":1611681056363,"results":"42","hashOfConfig":"43"},{"size":2319,"mtime":1614525729838,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":3351,"mtime":1614231290700,"results":"46","hashOfConfig":"43"},{"size":356,"mtime":1611459654848,"results":"47","hashOfConfig":"43"},{"size":1204,"mtime":1611930980189,"results":"48","hashOfConfig":"43"},{"size":1362,"mtime":1611844911750,"results":"49","hashOfConfig":"43"},{"size":1802,"mtime":1611471571179,"results":"50","hashOfConfig":"43"},{"size":4082,"mtime":1612079593403,"results":"51","hashOfConfig":"43"},{"size":2319,"mtime":1614528687717,"results":"52","hashOfConfig":"43"},{"size":2591,"mtime":1614415734658,"results":"53","hashOfConfig":"43"},{"size":1050,"mtime":1614415642848,"results":"54","hashOfConfig":"43"},{"size":3543,"mtime":1614415904213,"results":"55","hashOfConfig":"43"},{"size":432,"mtime":1611736745998,"results":"56","hashOfConfig":"43"},{"size":818,"mtime":1613751664778,"results":"57","hashOfConfig":"43"},{"size":5648,"mtime":1614243819904,"results":"58","hashOfConfig":"43"},{"size":1184,"mtime":1612540819436,"results":"59","hashOfConfig":"43"},{"size":1255,"mtime":1612540754776,"results":"60","hashOfConfig":"43"},{"size":238,"mtime":1612540677571,"results":"61","hashOfConfig":"43"},{"size":3522,"mtime":1614317117535,"results":"62","hashOfConfig":"43"},{"size":1506,"mtime":1614316949729,"results":"63","hashOfConfig":"43"},{"size":2343,"mtime":1612088379243,"results":"64","hashOfConfig":"43"},{"size":402,"mtime":1612087628650,"results":"65","hashOfConfig":"43"},{"size":6108,"mtime":1614317410747,"results":"66","hashOfConfig":"43"},{"size":3411,"mtime":1612152938478,"results":"67","hashOfConfig":"43"},{"size":8171,"mtime":1614306760572,"results":"68","hashOfConfig":"43"},{"size":2562,"mtime":1612538225632,"results":"69","hashOfConfig":"43"},{"size":1643,"mtime":1612593111433,"results":"70","hashOfConfig":"43"},{"size":1810,"mtime":1612591918167,"results":"71","hashOfConfig":"43"},{"size":6184,"mtime":1613705080748,"results":"72","hashOfConfig":"43"},{"size":3431,"mtime":1614528637198,"results":"73","hashOfConfig":"43"},{"size":1206,"mtime":1614528603332,"results":"74","hashOfConfig":"43"},{"size":4874,"mtime":1614528917825,"results":"75","hashOfConfig":"43"},{"size":8721,"mtime":1614530025444,"results":"76","hashOfConfig":"43"},{"size":971,"mtime":1614407386776,"results":"77","hashOfConfig":"43"},{"size":263,"mtime":1613712470178,"results":"78","hashOfConfig":"43"},{"size":2952,"mtime":1614310170147,"results":"79","hashOfConfig":"43"},{"size":3358,"mtime":1614437771361,"results":"80","hashOfConfig":"43"},{"size":4157,"mtime":1614412448395,"results":"81","hashOfConfig":"43"},{"size":6491,"mtime":1614446967169,"results":"82","hashOfConfig":"43"},{"size":2828,"mtime":1614530197086,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1shtzj8",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["178","179"],"F:\\Code\\shopPro\\frontend\\src\\App.js",[],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",["180"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Form, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { listProductDetails } from '../actions/productActions.js'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Rating from '../components/Rating'\r\n\r\nProductScreen.propTypes = {}\r\n\r\nfunction ProductScreen({ history, match }) {\r\n  const [qty, setQty] = useState(1)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  useEffect(() => {\r\n    dispatch(listProductDetails(match.params.id))\r\n  }, [dispatch, match])\r\n\r\n  const addToCartHandler = () => {\r\n    history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Link className='btn btn-light my-3' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <Row className='container-productGreen'>\r\n          <Col md={5} className='p-0 img-productGreen'>\r\n            <Image src={product.image} alt={product.name} fluid />\r\n          </Col>\r\n\r\n          <Col md={7} className='text-left p-1'>\r\n            <Row className='pl-4 pr-2'>\r\n              <ListGroup variant='flush' className='pr-3'>\r\n                <ListGroup.Item className='border-0 pb-0'>\r\n                  <strong>\r\n                    <h5>{product.name}</h5>\r\n                  </strong>\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='border-0 pb-0'>\r\n                  <Rating\r\n                    value={product.rating}\r\n                    text={`(${product.numReviews} reviews)`}\r\n                  />\r\n                </ListGroup.Item>\r\n\r\n                <ListGroup.Item className='text-justify'>\r\n                  Description: {product.description}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n\r\n              <ListGroup variant='flush' className='border-0 pt-0'>\r\n                <div className='group-items p-1 ml-4'>\r\n                  <ListGroup.Item className='border-0 pt-0 pb-0 mb-0 group-items'>\r\n                    <h2>${product.price}</h2>\r\n                  </ListGroup.Item>\r\n\r\n                  <ListGroup.Item className='border-0 group-items'>\r\n                    Status:{' '}\r\n                    {product.countInStock > 0 ? 'In Stock' : <b className='danger'>Out of Stock</b>}\r\n                  </ListGroup.Item>\r\n\r\n                  {product.countInStock > 0 && (\r\n                    <ListGroup.Item className='border-0 pt-0 pb-0 group-items'>\r\n                      <Row>\r\n                        <Col md={3}>Qty:</Col>\r\n                        <Col md={4}>\r\n                          <Form.Control\r\n                            className='text-center'\r\n                            type='number'\r\n                            size='sm'\r\n                            min='0'\r\n                            defaultValue='1'\r\n                            onChange={(e) => setQty(e.target.value)}\r\n                          ></Form.Control>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  )}\r\n                </div>\r\n\r\n                <ListGroup.Item className='ml-4 pl-0 pr-0'>\r\n                  <Button\r\n                    onClick={addToCartHandler}\r\n                    className='btn-block btn-danger'\r\n                    type='button'\r\n                    disabled={product.countInStock === 0}\r\n                    style={{ fontSize: '1em' }}\r\n                  >\r\n                    <strong>Add to Cart</strong>\r\n                  </Button>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",["181","182"],"import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\nimport '../toast.css'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\n\r\nMessage.propTypes = {}\r\n\r\nfunction Message({ variant, children }) {\r\n  toast.error(\r\n    <div>\r\n      <ErrorOutlineIcon className='pr-1' fontSize='large' /> {children}\r\n    </div>,\r\n    {\r\n      position: 'top-right',\r\n      autoClose: 2500,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    }\r\n  )\r\n\r\n  return (\r\n    <ToastContainer></ToastContainer>\r\n  )\r\n}\r\n\r\nMessage.defaultProps = {\r\n  variant: 'info',\r\n}\r\n\r\nexport default Message\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",["183","184"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Announcement from '../components/Announcement'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  Alert,\r\n  Image,\r\n  ListGroup,\r\n  Row,\r\n} from 'react-bootstrap'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions.js'\r\n\r\nexport const CartScreen = ({ match, location, history }) => {\r\n  const productId = match.params.id\r\n  const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  console.log(cartItems)\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n      dispatch(addToCart(productId, qty))\r\n    }\r\n  }, [dispatch, productId, qty])\r\n\r\n  const removeFromCartHandler = (id) => {\r\n    dispatch(removeFromCart(id))\r\n  }\r\n\r\n  const checkoutHandler = () => {\r\n    history.push('/login?redirect=shipping')\r\n  }\r\n\r\n  const test = (e) => {\r\n    const value = e.target.value\r\n    if (parseInt(value) === 0) {\r\n      alert('sai')\r\n    }\r\n    console.log(value)\r\n  }\r\n\r\n  return (\r\n    <Col>\r\n      <Link className='btn btn-light my-3' to='/'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <h3>Shopping Cart</h3>\r\n      <Row>\r\n        <Col md={9} className='p-0 pr-4 mt-2 text-center text-uppercase'>\r\n          {cartItems.length === 0 ? (\r\n            <Announcement variant='warning'>\r\n              <b className='text-light fs-1'>Your cart is empty </b>\r\n              <Link to='/'>\r\n                <Button variant='light' className='text-uppercase'>\r\n                  Shop now\r\n                </Button>\r\n              </Link>\r\n            </Announcement>\r\n          ) : (\r\n            <ListGroup variant='flush' className=''>\r\n              {cartItems.map((item) => (\r\n                <ListGroup.Item\r\n                  key={item.product}\r\n                  className='border-0 mt-2 shadow '\r\n                  rounded\r\n                >\r\n                  <h6>\r\n                    NSX <i class='fas fa-angle-right'></i>\r\n                  </h6>\r\n                  <Row>\r\n                    <Col md={3}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none product-card-green'\r\n                      >\r\n                        <Image src={item.image} alt={item.name} fluid />\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                      <Link\r\n                        to={`/product/${item.product}`}\r\n                        className='text-decoration-none'\r\n                      >\r\n                        <p style={{ color: '#343a40' }}>{item.name}</p>\r\n                      </Link>\r\n                    </Col>\r\n\r\n                    <Col md={2} className='pt-2'>\r\n                      <h6>${item.price}</h6>\r\n                    </Col>\r\n\r\n                    <Col md={2}>\r\n                      <Form.Control\r\n                        className='text-center'\r\n                        type='number'\r\n                        size='sm'\r\n                        min='0'\r\n                        defaultValue='1'\r\n                        onChange={(e) =>\r\n                          Number(e.target.value) !== 0\r\n                            ? dispatch(\r\n                                addToCart(item.product, Number(e.target.value))\r\n                              )\r\n                            : () => removeFromCartHandler(item.product)\r\n                        }\r\n                      ></Form.Control>\r\n                    </Col>\r\n\r\n                    <Col md={1}>\r\n                      <Button\r\n                        type='button'\r\n                        variant='light'\r\n                        onClick={() => removeFromCartHandler(item.product)}\r\n                      >\r\n                        <i className='fas fa-trash'></i>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup>\r\n          )}\r\n        </Col>\r\n\r\n        <Col md={3} className='p-0'>\r\n          <Card className='border-0 shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item className='d-flex justify-content-around '>\r\n                <div>\r\n                  <p className='title-bill'>Subtotal: </p>\r\n                  <p className='title-bill'>Price: </p>\r\n                </div>\r\n                <div>\r\n                  <h6 className='title-bill-value'>\r\n                    {cartItems.reduce((acc, item) => acc + item.qty, 0)} items\r\n                  </h6>\r\n                  <h6 className='title-bill-value'>\r\n                    $\r\n                    {cartItems\r\n                      .reduce((acc, item) => acc + item.qty * item.price, 0)\r\n                      .toFixed(2)}\r\n                  </h6>\r\n                </div>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n          <Card className='mt-3 border-0 btn-proceed'>\r\n            <Button\r\n              type='button'\r\n              className='btn-block btn-danger text-uppercase p-2'\r\n              disabled={cartItems === 0}\r\n              onClick={checkoutHandler}\r\n              size='sm'\r\n              style={{ fontFamily: 'Montserrat', fontSize: '0.78em' }}\r\n            >\r\n              Proceed To Checkout\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default CartScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",["185"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { SnackbarProvider } from 'notistack'\r\n\r\nRegisterScreen.propTypes = {}\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userRegister = useSelector((state) => state.userRegister)\r\n  const { loading, error, userInfo } = userRegister\r\n\r\n  const redirect = location.search ? location.search.split('=')[1] : '/'\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    if (password !== confirmPassword) {\r\n      setMessage('Password do not match')\r\n    } else {\r\n      dispatch(register(name, email, password))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      history.push(redirect)\r\n    }\r\n  }, [history, userInfo, redirect])\r\n\r\n  return (\r\n    <FormContainer>\r\n      <h2>Sign up</h2>\r\n      {message && <Message variant='danger'>{message}</Message>}\r\n      {error && <Message variant='danger'>{error}</Message>}\r\n      {loading && <Loader />}\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group controlId='name'>\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            type='name'\r\n            placeholder='Enter name'\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='email'>\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Enter email'\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='password'>\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Enter password'\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId='password'>\r\n          <Form.Label>Confirm Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Enter Confirm Password'\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          ></Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='success'>\r\n          Register\r\n        </Button>\r\n\r\n        <Row className='py-3 '>\r\n          <Col>\r\n            Have an Account?{' '}\r\n            <Link\r\n              className='text-decoration-none text-dark'\r\n              to={redirect ? `/login?redirect=${redirect}` : '/login'}\r\n            >\r\n              <strong>Login</strong>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default RegisterScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["186","187","188","189","190","191","192","193","194","195","196","197"],"import { set } from 'mongoose'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Table,\r\n  Image,\r\n  ListGroup,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {\r\n  register,\r\n  login,\r\n  getUserDetails,\r\n  updateUserProfile,\r\n} from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport { useSnackbar } from 'notistack'\r\nimport '../toast.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nProfileScreen.propTypes = {}\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, email, name, password }))\r\n      toast.success(\r\n        <div>\r\n          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n          Profile Updated\r\n        </div>,\r\n        {\r\n          className: 'Toastify__toast--success',\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push()\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getUserDetails('profile'))\r\n        dispatch(listMyOrders())\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {/* {message && <Message variant='danger'>{message}</Message>}\r\n        {error && <Message variant='danger'>{error}</Message>} */}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId='name'>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type='name'\r\n              placeholder='Enter name'\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='email'>\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type='email'\r\n              placeholder='Enter email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='password'>\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Enter password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='password'>\r\n            <Form.Label>Confirm Password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Enter Confirm Password'\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Button type='submit' variant='success'>\r\n            Update\r\n          </Button>\r\n          <ToastContainer />\r\n        </Form>\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2>My Order</h2>\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Announcement variant='danger'>{errorOrders}</Announcement>\r\n        ) : (\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            responsive\r\n            className='table-sm text-center'\r\n          >\r\n            <thead>\r\n              <tr className='text-center'>\r\n                <th>NAME</th>\r\n                <th>IMAGE</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td className='p-0 r'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='border-0'>\r\n                        {item.name}\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td style={{ width: '2rem', height: '2rem' }} className='p-0'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='p-1 border-0'>\r\n                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td>\r\n                    {order.createdAt.substring(11, 19)} <br/>{' '}\r\n                    {order.createdAt.substring(0, 10)}\r\n                  </td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(11, 19) +\r\n                      ' : '  +\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`/orders/${order._id}`}>\r\n                      <Button variant='info' className='text-uppercase'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["198"],"import React, { useState } from 'react'\r\nimport { Button, Form, Col, Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n\r\n  if (!shippingAddress.address) {\r\n    history.push('/shipping')\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('Paypal')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(savePaymentMethod(paymentMethod))\r\n    history.push('./placeorder')\r\n  }\r\n\r\n  return (\r\n    <FormContainer>\r\n      <CheckoutSteps step1 step2 step3 />\r\n      <h3>Payment Method</h3>\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group>\r\n          <Form.Label as='legend'>Select Method</Form.Label>\r\n\r\n          <Col>\r\n            <Form.Check\r\n              type='radio'\r\n              label='PayPal or Credit Card'\r\n              id='PayPal'\r\n              value='PayPal'\r\n              name='paymentMethod'\r\n              checked\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n            ></Form.Check>\r\n            \r\n            <Form.Check\r\n              type='radio'\r\n              label='Stripe'\r\n              id='Stripe'\r\n              value='Stripe'\r\n              name='paymentMethod'\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n            ></Form.Check>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='danger'>\r\n          Continue\r\n        </Button>\r\n      </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["199","200","201"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n\r\n  // Calculate prices\r\n  cart.itemsPrice = cart.cartItems.reduce(\r\n    (acc, item) => acc + item.price + item.qty,\r\n    0\r\n  )\r\n\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2)\r\n  }\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2)\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate)\r\n  const { order, success, error } = orderCreate\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`)\r\n    }\r\n  }, [history, success])\r\n\r\n  return (\r\n    <>\r\n      <Row className='justify-content-center'>\r\n        <CheckoutSteps\r\n          step1\r\n          step2\r\n          step3\r\n          step4\r\n          className='justify-content-center'\r\n        />\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <ListGroup variant='flush' className='shadow'>\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p className='mb-1'>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country},\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <b>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </b>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>\r\n                    <strong>${cart.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>\r\n                    <strong>${cart.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>\r\n                    <strong>${cart.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>\r\n                    <strong>${cart.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block btn-dark text-uppercase btn-apply'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  <strong>Place Order</strong>\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["202"],"F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",["203","204"],"import React from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\nimport '../toast.css'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\n\r\nMessageSuccess.propTypes = {}\r\n\r\nfunction MessageSuccess({ variant, children }) {\r\n  toast.success(\r\n    <div>\r\n      <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n      {variant}\r\n    </div>,\r\n    {\r\n      className: 'Toastify__toast--success',\r\n      position: 'top-right',\r\n      autoClose: 2500,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      preventDuplicates: true,\r\n      preventOpenDuplicates: true\r\n    }\r\n  )\r\n  return (\r\n    <ToastContainer></ToastContainer>\r\n  )\r\n}\r\n\r\nMessageSuccess.defaultProps = {\r\n  variant: 'info',\r\n}\r\n\r\nexport default MessageSuccess\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["205","206"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js",["207","208"],"import React, { useEffect } from 'react'\r\nimport { Button, Col, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../actions/productActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products } = productList\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts())\r\n    }\r\n  }, [dispatch, history, userInfo, successDelete, successCreate, createProduct])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n    }\r\n  }\r\n\r\n  const createProductHandle = () => {\r\n    dispatch(createProduct())\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h2 className='text-uppercase'>Products</h2>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <Button\r\n            className='my-3 text-uppercase btn-teal '\r\n            onClick={createProductHandle}\r\n          >\r\n            <i className='fas fa-plus'></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      <h5 className='text-uppercase'>Users List</h5>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <Table striped bordered hover response className='table-sm text-center'>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>NAME</th>\r\n              <th>PRICE</th>\r\n              <th>CATEGORY</th>\r\n              <th>BRAND</th>\r\n              <th>QUANTITY</th>\r\n              <th>ACTION</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {products.map((product) => (\r\n              <tr key={product._id}>\r\n                <td>{product._id}</td>\r\n                <td>{product.name}</td>\r\n                <td>${product.price}</td>\r\n                <td>{product.category}</td>\r\n                <td>{product.brand}</td>\r\n                <td>{product.countInStock}</td>\r\n                <td>\r\n                  <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                    <Button variant='info' className='btn-sm'>\r\n                      <i className='far fa-edit'></i>\r\n                    </Button>\r\n                  </LinkContainer>\r\n                  <Button\r\n                    variant='danger'\r\n                    className='btn-sm ml-1'\r\n                    onClick={() => deleteHandle(product._id)}\r\n                  >\r\n                    <i className='fas fa-trash'></i>\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["209","210","211","212","213"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id != productId) {\r\n        dispatch(listProductDetails(productId))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link\r\n        to='/admin/productlist'\r\n        className='btn btn-light my-3 text-uppercase'\r\n      >\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer>\r\n        <h2>Edit Product</h2>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <Form\r\n            onSubmit={submitHandler}\r\n            className='p-4 bg-light shadow rounded'\r\n          >\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='price'>\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter price'\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='image'>\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter image url'\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n              <Form.File\r\n                id='image-file'\r\n                label='Choose File'\r\n                custom\r\n                onChange={uploadFileHandler}\r\n              ></Form.File>\r\n              {uploading && <Loader />}\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='brand'>\r\n              <Form.Label>Brand</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter brand'\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='countInStock'>\r\n              <Form.Label>Count In Stock</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter countInStock'\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='category'>\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter category'\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter description'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",[],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":2,"column":18,"nodeType":"220","messageId":"221","endLine":2,"endColumn":22},{"ruleId":"218","severity":1,"message":"222","line":2,"column":10,"nodeType":"220","messageId":"221","endLine":2,"endColumn":15},{"ruleId":"218","severity":1,"message":"223","line":6,"column":8,"nodeType":"220","messageId":"221","endLine":6,"endColumn":30},{"ruleId":"218","severity":1,"message":"222","line":10,"column":3,"nodeType":"220","messageId":"221","endLine":10,"endColumn":8},{"ruleId":"218","severity":1,"message":"224","line":42,"column":9,"nodeType":"220","messageId":"221","endLine":42,"endColumn":13},{"ruleId":"218","severity":1,"message":"225","line":9,"column":10,"nodeType":"220","messageId":"221","endLine":9,"endColumn":26},{"ruleId":"218","severity":1,"message":"226","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":13},{"ruleId":"218","severity":1,"message":"227","line":10,"column":3,"nodeType":"220","messageId":"221","endLine":10,"endColumn":12},{"ruleId":"218","severity":1,"message":"228","line":13,"column":10,"nodeType":"220","messageId":"221","endLine":13,"endColumn":14},{"ruleId":"218","severity":1,"message":"229","line":16,"column":3,"nodeType":"220","messageId":"221","endLine":16,"endColumn":11},{"ruleId":"218","severity":1,"message":"230","line":17,"column":3,"nodeType":"220","messageId":"221","endLine":17,"endColumn":8},{"ruleId":"218","severity":1,"message":"231","line":21,"column":8,"nodeType":"220","messageId":"221","endLine":21,"endColumn":21},{"ruleId":"218","severity":1,"message":"232","line":23,"column":8,"nodeType":"220","messageId":"221","endLine":23,"endColumn":15},{"ruleId":"218","severity":1,"message":"233","line":26,"column":8,"nodeType":"220","messageId":"221","endLine":26,"endColumn":17},{"ruleId":"218","severity":1,"message":"234","line":29,"column":10,"nodeType":"220","messageId":"221","endLine":29,"endColumn":21},{"ruleId":"218","severity":1,"message":"235","line":40,"column":10,"nodeType":"220","messageId":"221","endLine":40,"endColumn":17},{"ruleId":"218","severity":1,"message":"236","line":40,"column":19,"nodeType":"220","messageId":"221","endLine":40,"endColumn":29},{"ruleId":"218","severity":1,"message":"237","line":51,"column":11,"nodeType":"220","messageId":"221","endLine":51,"endColumn":18},{"ruleId":"218","severity":1,"message":"238","line":2,"column":29,"nodeType":"220","messageId":"221","endLine":2,"endColumn":34},{"ruleId":"218","severity":1,"message":"239","line":8,"column":10,"nodeType":"220","messageId":"221","endLine":8,"endColumn":28},{"ruleId":"218","severity":1,"message":"240","line":9,"column":10,"nodeType":"220","messageId":"221","endLine":9,"endColumn":28},{"ruleId":"241","severity":1,"message":"242","line":57,"column":6,"nodeType":"243","endLine":57,"endColumn":24,"suggestions":"244"},{"ruleId":"241","severity":1,"message":"245","line":79,"column":6,"nodeType":"243","endLine":79,"endColumn":60,"suggestions":"246"},{"ruleId":"218","severity":1,"message":"222","line":2,"column":10,"nodeType":"220","messageId":"221","endLine":2,"endColumn":15},{"ruleId":"218","severity":1,"message":"247","line":5,"column":8,"nodeType":"220","messageId":"221","endLine":5,"endColumn":24},{"ruleId":"218","severity":1,"message":"248","line":24,"column":20,"nodeType":"220","messageId":"221","endLine":24,"endColumn":25},{"ruleId":"241","severity":1,"message":"249","line":51,"column":6,"nodeType":"243","endLine":51,"endColumn":45,"suggestions":"250"},{"ruleId":"218","severity":1,"message":"251","line":14,"column":8,"nodeType":"220","messageId":"221","endLine":14,"endColumn":22},{"ruleId":"241","severity":1,"message":"252","line":53,"column":6,"nodeType":"243","endLine":53,"endColumn":80,"suggestions":"253"},{"ruleId":"218","severity":1,"message":"254","line":6,"column":10,"nodeType":"220","messageId":"221","endLine":6,"endColumn":24},{"ruleId":"218","severity":1,"message":"255","line":6,"column":26,"nodeType":"220","messageId":"221","endLine":6,"endColumn":36},{"ruleId":"218","severity":1,"message":"251","line":11,"column":8,"nodeType":"220","messageId":"221","endLine":11,"endColumn":22},{"ruleId":"218","severity":1,"message":"256","line":12,"column":10,"nodeType":"220","messageId":"221","endLine":12,"endColumn":27},{"ruleId":"257","severity":1,"message":"258","line":84,"column":40,"nodeType":"259","messageId":"260","endLine":84,"endColumn":42},"no-native-reassign",["261"],"no-negated-in-lhs",["262"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'CheckCircleOutlineIcon' is defined but never used.","'test' is assigned a value but never used.","'SnackbarProvider' is defined but never used.","'set' is defined but never used.","'ListGroup' is defined but never used.","'Link' is defined but never used.","'register' is defined but never used.","'login' is defined but never used.","'FormContainer' is defined but never used.","'Message' is defined but never used.","'ErrorIcon' is defined but never used.","'useSnackbar' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'success' is assigned a value but never used.","'Image' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","'USER_DETAILS_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["263"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["264"],"'ErrorOutlineIcon' is defined but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["265"],"'MessageSuccess' is defined but never used.","React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["266"],"'getUserDetails' is defined but never used.","'updateUser' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},"Update the dependencies array to be: [history, order._id, success]",{"range":"275","text":"276"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"279","text":"280"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct._id]",{"range":"281","text":"282"},[1765,1783],"[history, order._id, success]",[2453,2507],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[1611,1685],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct._id]"]