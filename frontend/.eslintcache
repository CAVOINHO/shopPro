[{"F:\\Code\\shopPro\\frontend\\src\\index.js":"1","F:\\Code\\shopPro\\frontend\\src\\App.js":"2","F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js":"3","F:\\Code\\shopPro\\frontend\\src\\components\\Header.js":"4","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js":"5","F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js":"6","F:\\Code\\shopPro\\frontend\\src\\components\\Product.js":"7","F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js":"8","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js":"9","F:\\Code\\shopPro\\frontend\\src\\store.js":"10","F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js":"11","F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js":"12","F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js":"13","F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js":"14","F:\\Code\\shopPro\\frontend\\src\\components\\Message.js":"15","F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js":"16","F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js":"17","F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js":"18","F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js":"19","F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js":"20","F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js":"21","F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js":"22","F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js":"23","F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js":"24","F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js":"25","F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js":"26","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js":"27","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js":"28","F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js":"29","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js":"31","F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js":"32","F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js":"33","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js":"34","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js":"35","F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js":"36","F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js":"37","F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js":"38","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js":"39","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js":"40","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js":"41","F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js":"42","F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js":"43","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js":"44","F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js":"45","F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js":"46","F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js":"47","F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js":"48"},{"size":596,"mtime":1611681056363,"results":"49","hashOfConfig":"50"},{"size":2834,"mtime":1614830525448,"results":"51","hashOfConfig":"50"},{"size":362,"mtime":499162500000,"results":"52","hashOfConfig":"50"},{"size":4178,"mtime":1614829816283,"results":"53","hashOfConfig":"50"},{"size":356,"mtime":1611459654848,"results":"54","hashOfConfig":"50"},{"size":1920,"mtime":1615015347959,"results":"55","hashOfConfig":"50"},{"size":1393,"mtime":1614826478245,"results":"56","hashOfConfig":"50"},{"size":1802,"mtime":1611471571179,"results":"57","hashOfConfig":"50"},{"size":12407,"mtime":1615187108391,"results":"58","hashOfConfig":"50"},{"size":2473,"mtime":1614846527695,"results":"59","hashOfConfig":"50"},{"size":3749,"mtime":1614846130772,"results":"60","hashOfConfig":"50"},{"size":1526,"mtime":1614838929673,"results":"61","hashOfConfig":"50"},{"size":5088,"mtime":1614846213773,"results":"62","hashOfConfig":"50"},{"size":432,"mtime":1611736745998,"results":"63","hashOfConfig":"50"},{"size":689,"mtime":1614649127811,"results":"64","hashOfConfig":"50"},{"size":8328,"mtime":1615186818677,"results":"65","hashOfConfig":"50"},{"size":1184,"mtime":1615182986672,"results":"66","hashOfConfig":"50"},{"size":1281,"mtime":1615174863601,"results":"67","hashOfConfig":"50"},{"size":238,"mtime":1612540677571,"results":"68","hashOfConfig":"50"},{"size":3522,"mtime":1614317117535,"results":"69","hashOfConfig":"50"},{"size":1506,"mtime":1614316949729,"results":"70","hashOfConfig":"50"},{"size":2343,"mtime":1612088379243,"results":"71","hashOfConfig":"50"},{"size":402,"mtime":1612087628650,"results":"72","hashOfConfig":"50"},{"size":6108,"mtime":1614317410747,"results":"73","hashOfConfig":"50"},{"size":3365,"mtime":1614649258585,"results":"74","hashOfConfig":"50"},{"size":7840,"mtime":1614649208185,"results":"75","hashOfConfig":"50"},{"size":2870,"mtime":1614706303090,"results":"76","hashOfConfig":"50"},{"size":1643,"mtime":1612593111433,"results":"77","hashOfConfig":"50"},{"size":1965,"mtime":1614738476802,"results":"78","hashOfConfig":"50"},{"size":6130,"mtime":1614707284820,"results":"79","hashOfConfig":"50"},{"size":3492,"mtime":1614579706810,"results":"80","hashOfConfig":"50"},{"size":1206,"mtime":1614579714910,"results":"81","hashOfConfig":"50"},{"size":4874,"mtime":1614577675915,"results":"82","hashOfConfig":"50"},{"size":8719,"mtime":1614649705318,"results":"83","hashOfConfig":"50"},{"size":866,"mtime":1614649154847,"results":"84","hashOfConfig":"50"},{"size":263,"mtime":1613712470178,"results":"85","hashOfConfig":"50"},{"size":2952,"mtime":1614310170147,"results":"86","hashOfConfig":"50"},{"size":3358,"mtime":1614437771361,"results":"87","hashOfConfig":"50"},{"size":4599,"mtime":1614830690515,"results":"88","hashOfConfig":"50"},{"size":6491,"mtime":1614446967169,"results":"89","hashOfConfig":"50"},{"size":3021,"mtime":1614582866778,"results":"90","hashOfConfig":"50"},{"size":993,"mtime":1615105710189,"results":"91","hashOfConfig":"50"},{"size":1371,"mtime":1615104385062,"results":"92","hashOfConfig":"50"},{"size":3270,"mtime":1614736980745,"results":"93","hashOfConfig":"50"},{"size":781,"mtime":1614742244686,"results":"94","hashOfConfig":"50"},{"size":778,"mtime":1614826321511,"results":"95","hashOfConfig":"50"},{"size":1251,"mtime":1615014512831,"results":"96","hashOfConfig":"50"},{"size":514,"mtime":1615015305728,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1shtzj8",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"F:\\Code\\shopPro\\frontend\\src\\index.js",[],["205","206"],"F:\\Code\\shopPro\\frontend\\src\\App.js",[],"F:\\Code\\shopPro\\frontend\\src\\reportWebVitals.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Header.js",["207","208","209"],"import Badge from '@material-ui/core/Badge'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Container,\r\n  Form,\r\n  FormControl,\r\n  Nav,\r\n  Navbar,\r\n  NavDropdown,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { logout } from '../actions/userActions'\r\nimport SearchBox from './SearchBox'\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n    border: `2px solid ${theme.palette.background.paper}`,\r\n    padding: '0 4px',\r\n  },\r\n}))(Badge)\r\n\r\nfunction Header(props) {\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n  const { cartItems } = cart\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  return (\r\n    <header>\r\n      <Navbar bg='light' variant='light' expand='lg' collapseOnSelect>\r\n        <Container>\r\n          <LinkContainer to='/'>\r\n            <Navbar.Brand className='text-uppercase font-weight-bold'>\r\n              ProShop\r\n            </Navbar.Brand>\r\n          </LinkContainer>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Route render={({ history }) => <SearchBox history={history} />} />\r\n            <Nav className='ml-auto' inline>\r\n              <LinkContainer to='/cart'>\r\n                <Nav.Link className='text-uppercase'>\r\n                  <IconButton aria-label='cart'>\r\n                    <StyledBadge\r\n                      badgeContent={cartItems.reduce(\r\n                        (acc, item) => acc + item.qty,\r\n                        0\r\n                      )}\r\n                      color='secondary'\r\n                    >\r\n                      <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                  </IconButton>\r\n                </Nav.Link>\r\n              </LinkContainer>\r\n\r\n              {userInfo ? (\r\n                <NavDropdown\r\n                  title={userInfo.name}\r\n                  id='username'\r\n                  className='pt-3'\r\n                >\r\n                  <LinkContainer to='/profile'>\r\n                    <NavDropdown.Item>\r\n                      <i class='fas fa-user pr-1'></i>Profile\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <NavDropdown.Item onClick={logoutHandler}>\r\n                    <i class='fas fa-sign-out-alt pr-1'></i>Log Out\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n              ) : (\r\n                <LinkContainer to='/login' className='pt-4'>\r\n                  <Nav.Link className='text-uppercase'>\r\n                    <i class='fas fa-sign-in-alt pr-1'></i>Sign In\r\n                  </Nav.Link>\r\n                </LinkContainer>\r\n              )}\r\n              {userInfo && userInfo.isAdmin && (\r\n                <NavDropdown title='Admin' id='adminmenu' className='pt-3'>\r\n                  <LinkContainer to='/admin/userlist'>\r\n                    <NavDropdown.Item>\r\n                      <i class='fas fa-users pr-1'></i>User\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/productlist'>\r\n                    <NavDropdown.Item>\r\n                      <i class='fas fa-boxes pr-2'></i>Products\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n                  <LinkContainer to='/admin/orderlist'>\r\n                    <NavDropdown.Item>\r\n                      <i class='fas fa-cash-register pr-2'></i>Orders\r\n                    </NavDropdown.Item>\r\n                  </LinkContainer>\r\n                </NavDropdown>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Footer.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\HomeScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Product.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Rating.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProductScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\store.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\productReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\productConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\productActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Loader.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Message.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\CartScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\cartReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\cartActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\cartConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\reducers\\userReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\userConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\LoginScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\FormContainer.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\userActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\RegisterScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\ProfileScreen.js",["210","211","212"],"import CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Form, Image, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { toast, ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { listMyOrders } from '../actions/orderActions'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport '../toast.css'\r\nProfileScreen.propTypes = {}\r\n\r\nfunction ProfileScreen({ location, history }) {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmPassword, setConfirmPassword] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n  const { success } = userUpdateProfile\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy)\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    error &&\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> {error}\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\r\n        <div>\r\n          <ErrorOutlineIcon className='pr-1' fontSize='large' /> Password is not\r\n          match\r\n        </div>,\r\n        {\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    } else {\r\n      dispatch(updateUserProfile({ id: user._id, email, name, password }))\r\n      toast.success(\r\n        <div>\r\n          <CheckCircleOutlineIcon className='pr-1' fontSize='large' />\r\n          Profile Updated\r\n        </div>,\r\n        {\r\n          className: 'Toastify__toast--success',\r\n          position: 'top-right',\r\n          autoClose: 2500,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push()\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getUserDetails('profile'))\r\n        dispatch(listMyOrders())\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n      }\r\n    }\r\n  }, [dispatch, history, userInfo, user])\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>User Profile</h2>\r\n        {/* {message && <Message variant='danger'>{message}</Message>}\r\n        {error && <Message variant='danger'>{error}</Message>} */}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId='name'>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n              type='name'\r\n              placeholder='Enter name'\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='email'>\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control\r\n              type='email'\r\n              placeholder='Enter email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='password'>\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Enter password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='password'>\r\n            <Form.Label>Confirm Password</Form.Label>\r\n            <Form.Control\r\n              type='password'\r\n              placeholder='Enter Confirm Password'\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Button type='submit' variant='success'>\r\n            Update\r\n          </Button>\r\n          <ToastContainer />\r\n        </Form>\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2>My Order</h2>\r\n        {loadingOrders ? (\r\n          <Loader />\r\n        ) : errorOrders ? (\r\n          <Announcement variant='danger'>{errorOrders}</Announcement>\r\n        ) : (\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            responsive\r\n            className='table-sm text-center'\r\n          >\r\n            <thead>\r\n              <tr className='text-center'>\r\n                <th>NAME</th>\r\n                <th>IMAGE</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td className='p-0 r'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='border-0'>\r\n                        {item.name}\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td style={{ width: '2rem', height: '2rem' }} className='p-0'>\r\n                    {order.orderItems.map((item, index) => (\r\n                      <td key={index} className='p-1 border-0'>\r\n                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                      </td>\r\n                    ))}\r\n                  </td>\r\n                  <td>\r\n                    {order.createdAt.substring(11, 19)} <br />{' '}\r\n                    {order.createdAt.substring(0, 10)}\r\n                  </td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(11, 19) +\r\n                      ' : ' +\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }} />\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`/orders/${order._id}`}>\r\n                      <Button variant='info' className='text-uppercase'>\r\n                        Details\r\n                      </Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ProfileScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ShippingScreen.js",["213","214"],"import React, { useState } from 'react'\r\nimport { Button, Form, Container } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport Step from '../components/Step'\r\nimport FormContainer from '../components/FormContainer'\r\n\r\nexport const ShippingScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n\r\n  const [address, setAddress] = useState(shippingAddress.address)\r\n  const [city, setCity] = useState(shippingAddress.city)\r\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n  const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n    history.push('./payment')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Container className='pl-5 pr-5 mb-2 '>\r\n        <Step step1 step2 className='p-5' />\r\n      </Container> */}\r\n      <FormContainer>\r\n        <Step step1 step2 />\r\n\r\n        <h3 className='pt-3 text-center'>Shipping</h3>\r\n        <Form onSubmit={submitHandler}>\r\n          <Form.Group controlId='address'>\r\n            <Form.Label>Address</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter address'\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='city'>\r\n            <Form.Label>City</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter city'\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='postalCode'>\r\n            <Form.Label>PostalCode</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter postalCode'\r\n              value={postalCode}\r\n              onChange={(e) => setPostalCode(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId='country'>\r\n            <Form.Label>Country</Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              required\r\n              placeholder='Enter country'\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n            ></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Button type='submit' variant='danger'>\r\n            Continue\r\n          </Button>\r\n        </Form>\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\CheckoutSteps.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\PaymentScreen.js",["215"],"import FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport React, { useState } from 'react'\r\nimport { Button, Col, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Step from '../components/Step'\r\nimport ButtonComponent from '../components/ButtonComponent'\r\n\r\nexport const PaymentScreen = ({ history }) => {\r\n  const cart = useSelector((state) => state.cart)\r\n  const { shippingAddress } = cart\r\n\r\n  if (!shippingAddress.address) {\r\n    history.push('/shipping')\r\n  }\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(savePaymentMethod(paymentMethod))\r\n    history.push('./placeorder')\r\n  }\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Step step1 step2 step3 />\r\n      <h3 className='pt-3 text-center'>Payment Method</h3>\r\n      <Form onSubmit={submitHandler}>\r\n        <Form.Group>\r\n          <Form.Label as='legend'>\r\n            <h5>Select Method</h5>\r\n          </Form.Label>\r\n\r\n          <Col>\r\n            <RadioGroup\r\n              value={paymentMethod}\r\n              onChange={(e) => setPaymentMethod(e.target.value)}\r\n            >\r\n              <FormControlLabel\r\n                value='PayPal'\r\n                control={<Radio />}\r\n                label='PayPal or Credit Card'\r\n              />\r\n              <FormControlLabel\r\n                value='Stripe'\r\n                control={<Radio />}\r\n                label='Stripe'\r\n              />\r\n            </RadioGroup>\r\n          </Col>\r\n        </Form.Group>\r\n\r\n        <Button type='submit' variant='danger'>\r\n          Continue\r\n        </Button>\r\n      </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\PlaceOrderScreen.js",["216","217","218"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Card,\r\n  Container,\r\n} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Step from '../components/Step'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { USER_DETAILS_RESET } from '../constants/userConstants'\r\n\r\nPlaceOrderScreen.propTypes = {}\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const cart = useSelector((state) => state.cart)\r\n\r\n  // Calculate prices\r\n  cart.itemsPrice = cart.cartItems.reduce(\r\n    (acc, item) => acc + item.price + item.qty,\r\n    0\r\n  )\r\n\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2)\r\n  }\r\n\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\r\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)))\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2)\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate)\r\n  const { order, success, error } = orderCreate\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      history.push(`/order/${order._id}`)\r\n    }\r\n  }, [history, success])\r\n\r\n  return (\r\n    <>\r\n      <Container></Container>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <Step step1 step2 step3 step4 />\r\n          <ListGroup variant='flush' className='shadow pt-2'>\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p className='mb-1'>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country},\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item className='border-0'>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <strong>Method: </strong>\r\n              {cart.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <b>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </b>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>\r\n                    <strong>${cart.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>\r\n                    <strong>${cart.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>\r\n                    <strong>${cart.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>\r\n                    <strong>${cart.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block btn-dark text-uppercase btn-apply'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  <strong>Place Order</strong>\r\n                </Button>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\reducers\\orderReducers.js",[],"F:\\Code\\shopPro\\frontend\\src\\constants\\orderConstants.js",[],"F:\\Code\\shopPro\\frontend\\src\\actions\\orderActions.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\OrderScreen.js",["219"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Card, Col, Image, ListGroup, Row } from 'react-bootstrap'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  deliverOrder,\r\n  getOrderDetails,\r\n  payOrder\r\n} from '../actions/orderActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {\r\n  ORDER_DELIVER_RESET,\r\n  ORDER_PAY_RESET\r\n} from '../constants/orderConstants'\r\n\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id\r\n\r\n  const [sdkReady, setSdkReady] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  const orderPay = useSelector((state) => state.orderPay)\r\n  const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver)\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push('/login')\r\n    }\r\n\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal')\r\n      const script = document.createElement('script')\r\n      script.type = 'text/javascript'\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\r\n      script.async = true\r\n      script.onload = () => {\r\n        setSdkReady(true)\r\n      }\r\n      document.body.appendChild(script)\r\n    }\r\n\r\n    if (!order || successPay || successDeliver) {\r\n      dispatch({ type: ORDER_PAY_RESET })\r\n      dispatch({ type: ORDER_DELIVER_RESET })\r\n      dispatch(getOrderDetails(orderId))\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPalScript()\r\n      } else {\r\n        setSdkReady(true)\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, order])\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult)\r\n    dispatch(payOrder(orderId, paymentResult))\r\n  }\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order))\r\n  }\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h2>Order {order._id}</h2>\r\n      <Row className='justify-content-center'>\r\n        <Col md={7} className='ml-3 mr-3 pl-0 pr-0 mt-2'>\r\n          <ListGroup variant='flush' className='shadow'>\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Shiping</h5>\r\n              <p>\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>\r\n                <a\r\n                  className='link-product'\r\n                  href={`mailto: ${order.user.email}`}\r\n                >\r\n                  {order.user.email}\r\n                </a>\r\n              </p>\r\n\r\n              <p className='mb-3'>\r\n                <strong>Address: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city},{' '}\r\n                {order.shippingAddress.postalCode},{' '}\r\n                {order.shippingAddress.country},\r\n              </p>\r\n\r\n              {order.isDelivered ? (\r\n                <Announcement variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Delivered</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Payment Method</h5>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n              </p>\r\n\r\n              {order.isPaid ? (\r\n                <Announcement variant='success'>\r\n                  Paid on {order.paidAt}\r\n                </Announcement>\r\n              ) : (\r\n                <Announcement variant='danger'>No Paid</Announcement>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h5 className='text-uppercase'>Order Items</h5>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={2}>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            <Image\r\n                              src={item.image}\r\n                              alt={item.name}\r\n                              fluid\r\n                              rounded\r\n                            />\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <Link\r\n                            to={`/product/${item.product}`}\r\n                            className='link-product'\r\n                          >\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                          <b>\r\n                            {item.qty} x ${item.price} = $\r\n                            {item.qty * item.price}\r\n                          </b>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card className='shadow mt-2'>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h4 className='text-uppercase text-center'>Order Summary</h4>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>\r\n                    <strong>${order.itemsPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>\r\n                    <strong>${order.shippingPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>\r\n                    <strong>${order.taxPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>\r\n                    <strong>${order.totalPrice}</strong>\r\n                  </Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              {!order.isPaid && (\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {!sdkReady ? (\r\n                    <Loader />\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={deliverHandler}\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\MessageSuccess.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Announcement.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\screens\\UserEditScreen.js",["220","221"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport {\r\n  USER_UPDATE_RESET\r\n} from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n  const userId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const userDetails = useSelector((state) => state.userDetails)\r\n  const { loading, error, user } = userDetails\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = userUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET })\r\n      history.push('/admin/userlist')\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetails(userId))\r\n      } else {\r\n        setName(user.name)\r\n        setEmail(user.email)\r\n        setIsAdmin(user.isAdmin)\r\n      }\r\n    }\r\n  }, [dispatch, user, userId, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link to='/admin/userlist' className='btn btn-light my-3 text-uppercase'>\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer sm>\r\n        <h2>Edit User</h2>\r\n        {loadingUpdate ? (\r\n          <Loader /> \r\n        ) && <MessageSuccess variant='Chỉnh sửa thành công'></MessageSuccess> : errorUpdate ? (\r\n          <Message>{errorUpdate}</Message>\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : (\r\n          <Form onSubmit={submitHandler} md={10}>\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='email'>\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                placeholder='Enter email'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='idAdmin'>\r\n              <Form.Check\r\n                type='checkbox'\r\n                label='Is Admin'\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n            <Button type='submit' variant='warning'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductListScreen.js",["222"],"import React, { useEffect } from 'react'\r\nimport { Button, Col, Row, Table } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport '../../src/notisfied.css'\r\nimport {\r\n  createProduct,\r\n  deleteProduct,\r\n  listProducts,\r\n} from '../actions/productActions'\r\nimport Announcement from '../components/Announcement'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\nimport Paginate from '../components/Paginate'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n  const pageNumber = match.params.pageNumber || 1\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productList = useSelector((state) => state.productList)\r\n  const { loading, error, products, pages, page } = productList\r\n\r\n  const productDelete = useSelector((state) => state.productDelete)\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = productDelete\r\n\r\n  const productCreate = useSelector((state) => state.productCreate)\r\n  const {\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n    success: successCreate,\r\n    product: createdProduct,\r\n  } = productCreate\r\n\r\n  const userLogin = useSelector((state) => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n    if (!userInfo.isAdmin) {\r\n      history.push('/login')\r\n    }\r\n\r\n    if (successCreate) {\r\n      history.push(`/admin/product/${createdProduct._id}/edit`)\r\n    } else {\r\n      dispatch(listProducts('', pageNumber))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    history,\r\n    userInfo,\r\n    successDelete,\r\n    successCreate,\r\n    createProduct,\r\n    pageNumber,\r\n  ])\r\n\r\n  const deleteHandle = (id) => {\r\n    if (window.confirm('You are sure?')) {\r\n      dispatch(deleteProduct(id))\r\n    }\r\n  }\r\n\r\n  const createProductHandle = () => {\r\n    dispatch(createProduct())\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h2 className='text-uppercase'>Products</h2>\r\n        </Col>\r\n        <Col className='text-right'>\r\n          <Button\r\n            className='my-3 text-uppercase btn-teal '\r\n            onClick={createProductHandle}\r\n          >\r\n            <i className='fas fa-plus'></i> Create Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {loadingDelete && <Loader />}\r\n      {errorDelete && <Message>{errorDelete}</Message>}\r\n      {loadingCreate && <Loader />}\r\n      {errorCreate && <Message>{errorCreate}</Message>}\r\n      <h5 className='text-uppercase'>Users List</h5>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Announcement variant='danger'>{error}</Announcement>\r\n      ) : (\r\n        <>\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            response\r\n            className='table-sm text-center'\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>NAME</th>\r\n                <th>PRICE</th>\r\n                <th>CATEGORY</th>\r\n                <th>BRAND</th>\r\n                <th>QUANTITY</th>\r\n                <th>ACTION</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {products.map((product) => (\r\n                <tr key={product._id}>\r\n                  <td>{product._id}</td>\r\n                  <td>{product.name}</td>\r\n                  <td>${product.price}</td>\r\n                  <td>{product.category}</td>\r\n                  <td>{product.brand}</td>\r\n                  <td>{product.countInStock}</td>\r\n                  <td>\r\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                      <Button variant='info' className='btn-sm'>\r\n                        <i className='far fa-edit'></i>\r\n                      </Button>\r\n                    </LinkContainer>\r\n                    <Button\r\n                      variant='danger'\r\n                      className='btn-sm ml-1'\r\n                      onClick={() => deleteHandle(product._id)}\r\n                    >\r\n                      <i className='fas fa-trash'></i>\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <Paginate\r\n            pages={pages}\r\n            page={page}\r\n            isAdmin={true}\r\n            className=''\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductListScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\ProductEditScreen.js",["223","224","225","226","227"],"import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { listProductDetails, updateProduct } from '../actions/productActions'\r\nimport FormContainer from '../components/FormContainer'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport MessageSuccess from '../components/MessageSuccess'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductEditScreen({ match, history }) {\r\n  const productId = match.params.id\r\n\r\n  const [name, setName] = useState('')\r\n  const [price, setPrice] = useState(0)\r\n  const [image, setImage] = useState('')\r\n  const [brand, setBrand] = useState('')\r\n  const [category, setCategory] = useState('')\r\n  const [countInStock, setCountInStock] = useState(0)\r\n  const [description, setDescription] = useState('')\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const productDetails = useSelector((state) => state.productDetails)\r\n  const { loading, error, product } = productDetails\r\n\r\n  const productUpdate = useSelector((state) => state.productUpdate)\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = productUpdate\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault()\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    )\r\n  }\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0]\r\n    const formData = new FormData()\r\n    formData.append('image', file)\r\n    setUploading(true)\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n\r\n      const { data } = await axios.post('/api/uploads', formData, config)\r\n\r\n      setImage(data)\r\n      setUploading(false)\r\n    } catch (error) {\r\n      console.error(error)\r\n      setUploading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET })\r\n      history.push('/admin/productlist')\r\n    } else {\r\n      if (!product.name || product._id != productId) {\r\n        dispatch(listProductDetails(productId))\r\n      } else {\r\n        setName(product.name)\r\n        setPrice(product.price)\r\n        setImage(product.image)\r\n        setBrand(product.brand)\r\n        setCategory(product.category)\r\n        setCountInStock(product.countInStock)\r\n        setDescription(product.description)\r\n      }\r\n    }\r\n  }, [dispatch, history, productId, product, successUpdate])\r\n\r\n  return (\r\n    <>\r\n      <Link\r\n        to='/admin/productlist'\r\n        className='btn btn-light my-3 text-uppercase'\r\n      >\r\n        <i class='fas fa-arrow-left pr-2'></i>\r\n        Go back\r\n      </Link>\r\n      <FormContainer>\r\n        <h2>Edit Product</h2>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message>{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message>{error}</Message>\r\n        ) : (\r\n          <Form\r\n            onSubmit={submitHandler}\r\n            className='p-4 bg-light shadow rounded'\r\n          >\r\n            <Form.Group controlId='name'>\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type='name'\r\n                placeholder='Enter name'\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='price'>\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter price'\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='image'>\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter image url'\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n              <Form.File\r\n                id='image-file'\r\n                label='Choose File'\r\n                custom\r\n                onChange={uploadFileHandler}\r\n              ></Form.File>\r\n              {uploading && <Loader />}\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='brand'>\r\n              <Form.Label>Brand</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter brand'\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='countInStock'>\r\n              <Form.Label>Count In Stock</Form.Label>\r\n              <Form.Control\r\n                type='number'\r\n                placeholder='Enter countInStock'\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='category'>\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter category'\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type='text'\r\n                placeholder='Enter description'\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type='submit' variant='primary'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProductEditScreen\r\n","F:\\Code\\shopPro\\frontend\\src\\screens\\OrderListScreen.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ActiveRating.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ButtonComponent.js",["228"],"import Button from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\r\nimport lime from '@material-ui/core/colors/lime'\r\n\r\nconst theme = createMuiTheme({\r\n  success: {\r\n    main: '#bac778',\r\n  },\r\n\r\n  palette: {\r\n    primary: {\r\n      light: '#ea605d',\r\n      main: '#e53935',\r\n      dark: '#a02725',\r\n      contrastText: '#fff',\r\n    },\r\n\r\n    secondary: {\r\n      light: '#57975b',\r\n      main: '#2e7d32',\r\n      dark: '#205723',\r\n      contrastText: '#fff',\r\n    },\r\n\r\n    success: {\r\n      main: '#bac778',\r\n    },\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    // margin: theme.spacing(1),\r\n  },\r\n}))\r\n\r\nexport default function IconLabelButtons({\r\n  color,\r\n  value,\r\n  size,\r\n  endIcon,\r\n  startIcon,\r\n  onClick,\r\n  disabled,\r\n  type,\r\n}) {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div>\r\n      <ThemeProvider theme={theme}>\r\n        <Button\r\n          variant='contained'\r\n          size={size}\r\n          color={color}\r\n          endIcon={endIcon}\r\n          startIcon={startIcon}\r\n          className={classes.button}\r\n          onClick={onClick}\r\n          disabled={disabled}\r\n          type={type}\r\n        >\r\n          {value}\r\n        </Button>\r\n      </ThemeProvider>\r\n    </div>\r\n  )\r\n}\r\n","F:\\Code\\shopPro\\frontend\\src\\components\\Step.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\SearchBox.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Paginate.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\ProductCarousel.js",[],"F:\\Code\\shopPro\\frontend\\src\\components\\Meta.js",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":8,"column":3,"nodeType":"235","messageId":"236","endLine":8,"endColumn":9},{"ruleId":"233","severity":1,"message":"237","line":10,"column":3,"nodeType":"235","messageId":"236","endLine":10,"endColumn":7},{"ruleId":"233","severity":1,"message":"238","line":11,"column":3,"nodeType":"235","messageId":"236","endLine":11,"endColumn":14},{"ruleId":"233","severity":1,"message":"239","line":21,"column":10,"nodeType":"235","messageId":"236","endLine":21,"endColumn":17},{"ruleId":"233","severity":1,"message":"240","line":21,"column":19,"nodeType":"235","messageId":"236","endLine":21,"endColumn":29},{"ruleId":"233","severity":1,"message":"241","line":32,"column":11,"nodeType":"235","messageId":"236","endLine":32,"endColumn":18},{"ruleId":"233","severity":1,"message":"242","line":2,"column":24,"nodeType":"235","messageId":"236","endLine":2,"endColumn":33},{"ruleId":"233","severity":1,"message":"243","line":5,"column":8,"nodeType":"235","messageId":"236","endLine":5,"endColumn":21},{"ruleId":"233","severity":1,"message":"244","line":10,"column":8,"nodeType":"235","messageId":"236","endLine":10,"endColumn":23},{"ruleId":"233","severity":1,"message":"245","line":16,"column":10,"nodeType":"235","messageId":"236","endLine":16,"endColumn":28},{"ruleId":"233","severity":1,"message":"246","line":17,"column":10,"nodeType":"235","messageId":"236","endLine":17,"endColumn":28},{"ruleId":"247","severity":1,"message":"248","line":65,"column":6,"nodeType":"249","endLine":65,"endColumn":24,"suggestions":"250"},{"ruleId":"247","severity":1,"message":"251","line":79,"column":6,"nodeType":"249","endLine":79,"endColumn":60,"suggestions":"252"},{"ruleId":"233","severity":1,"message":"253","line":24,"column":20,"nodeType":"235","messageId":"236","endLine":24,"endColumn":25},{"ruleId":"247","severity":1,"message":"254","line":51,"column":6,"nodeType":"249","endLine":51,"endColumn":45,"suggestions":"255"},{"ruleId":"247","severity":1,"message":"256","line":55,"column":6,"nodeType":"249","endLine":63,"endColumn":4,"suggestions":"257"},{"ruleId":"233","severity":1,"message":"258","line":6,"column":10,"nodeType":"235","messageId":"236","endLine":6,"endColumn":24},{"ruleId":"233","severity":1,"message":"259","line":6,"column":26,"nodeType":"235","messageId":"236","endLine":6,"endColumn":36},{"ruleId":"233","severity":1,"message":"260","line":11,"column":8,"nodeType":"235","messageId":"236","endLine":11,"endColumn":22},{"ruleId":"233","severity":1,"message":"261","line":12,"column":10,"nodeType":"235","messageId":"236","endLine":12,"endColumn":27},{"ruleId":"262","severity":1,"message":"263","line":84,"column":40,"nodeType":"264","messageId":"265","endLine":84,"endColumn":42},{"ruleId":"233","severity":1,"message":"266","line":5,"column":8,"nodeType":"235","messageId":"236","endLine":5,"endColumn":12},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormControl' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'success' is assigned a value but never used.","'Container' is defined but never used.","'CheckoutSteps' is defined but never used.","'ButtonComponent' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","'USER_DETAILS_RESET' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["269"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["270"],"'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["272"],"'getUserDetails' is defined but never used.","'updateUser' is defined but never used.","'MessageSuccess' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'lime' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},"Update the dependencies array to be: [history, order._id, success]",{"range":"281","text":"282"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"283","text":"284"},"Update the dependencies array to be: [dispatch, user, userId, successUpdate, history]",{"range":"285","text":"286"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, pageNumber, createdProduct._id]",{"range":"287","text":"288"},[1781,1799],"[history, order._id, success]",[2451,2505],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]",[1578,1617],"[dispatch, user, userId, successUpdate, history]",[1679,1806],"[dispatch, history, userInfo, successDelete, successCreate, pageNumber, createdProduct._id]"]